import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { Insight } from '../mock/insights';
import { colors, spacing, typography, shadows, borderRadius, commonStyles } from '@/constants/styles';

interface InsightCardProps {
  insight: Insight;
  onPress?: () => void;
}

const getInsightIcon = (type: Insight['type']): keyof typeof Ionicons.glyphMap => {
  switch (type) {
    case 'summary':
      return 'document-text';
    case 'key_points':
      return 'list';
    case 'recommendations':
      return 'bulb';
    case 'trends':
      return 'trending-up';
    case 'anomalies':
      return 'warning';
    default:
      return 'information-circle';
  }
};

const getInsightColor = (type: Insight['type']): string => {
  switch (type) {
    case 'summary':
      return colors.primary;
    case 'key_points':
      return colors.secondary;
    case 'recommendations':
      return colors.warning;
    case 'trends':
      return colors.success;
    case 'anomalies':
      return colors.error;
    default:
      return colors.text.tertiary;
  }
};

const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

export const InsightCard: React.FC<InsightCardProps> = ({ insight, onPress }) => {
  const icon = getInsightIcon(insight.type);
  const color = getInsightColor(insight.type);

  const renderContent = () => {
    if (Array.isArray(insight.content)) {
      return (
        <View style={styles.listContainer}>
          {insight.content.map((item, index) => (
            <View key={index} style={[styles.listItem, commonStyles.row]}>
              <Ionicons name="ellipse" size={8} color={color} style={styles.bullet} />
              <Text style={[commonStyles.text, styles.listItemText]}>{item}</Text>
            </View>
          ))}
        </View>
      );
    }
    return <Text style={[commonStyles.text, styles.content]}>{insight.content}</Text>;
  };

  return (
    <TouchableOpacity
      style={[styles.container, commonStyles.card, { borderLeftColor: color }]}
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={[styles.header, commonStyles.row, commonStyles.spaceBetween]}>
        <View style={[styles.titleContainer, commonStyles.row]}>
          <Ionicons name={icon} size={24} color={color} style={styles.icon} />
          <Text style={[commonStyles.title, styles.title]}>
            {insight.type.charAt(0).toUpperCase() + insight.type.slice(1).replace('_', ' ')}
          </Text>
        </View>
        <View style={styles.metadata}>
          <Text style={[commonStyles.metaText, styles.confidence]}>
            {Math.round(insight.confidence_score * 100)}% confidence
          </Text>
          <Text style={commonStyles.metaText}>{formatDate(insight.created_at)}</Text>
        </View>
      </View>
      {renderContent()}
      <View style={[styles.footer, commonStyles.row, commonStyles.spaceBetween]}>
        <Text style={[commonStyles.metaText, styles.model]}>Generated by {insight.metadata.model}</Text>
        {insight.metadata.processing_time && (
          <Text style={[commonStyles.metaText, styles.processingTime]}>
            Processed in {insight.metadata.processing_time}s
          </Text>
        )}
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    marginHorizontal: spacing.lg,
    borderLeftWidth: 4,
  },
  header: {
    marginBottom: spacing.md,
  },
  titleContainer: {
    flex: 1,
  },
  icon: {
    marginRight: spacing.sm,
  },
  title: {
    textTransform: 'capitalize',
  },
  metadata: {
    alignItems: 'flex-end',
  },
  confidence: {
    marginBottom: spacing.xs,
  },
  content: {
    lineHeight: typography.sizes.md * 1.5,
    marginBottom: spacing.md,
  },
  listContainer: {
    marginBottom: spacing.md,
  },
  listItem: {
    marginBottom: spacing.sm,
  },
  bullet: {
    marginTop: spacing.sm,
    marginRight: spacing.sm,
  },
  listItemText: {
    flex: 1,
    lineHeight: typography.sizes.md * 1.5,
  },
  footer: {
    borderTopWidth: 1,
    borderTopColor: colors.border,
    paddingTop: spacing.md,
    marginTop: spacing.xs,
  },
  model: {
    flex: 1,
  },
  processingTime: {
    marginLeft: spacing.md,
  },
}); 